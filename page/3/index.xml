<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chang's blog</title><link>//blog.yech.xyz/</link><description>Recent content on Chang's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2020 by Ye Chang</copyright><lastBuildDate>Mon, 23 Mar 2020 22:38:14 +0800</lastBuildDate><atom:link href="//blog.yech.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>治好了键盘的一个毛病</title><link>//blog.yech.xyz/posts/keyboard_anne_pro/</link><pubDate>Mon, 25 Feb 2019 02:05:02 +0800</pubDate><guid>//blog.yech.xyz/posts/keyboard_anne_pro/</guid><description>Chang's blog //blog.yech.xyz/posts/keyboard_anne_pro/ -&lt;p>困扰了两年的键盘小 bug 解决了。&lt;/p>
&lt;h2 id="起因">起因&lt;/h2>
&lt;p>机械键盘为了防止游戏玩家误触 &lt;code>WIN&lt;/code> 键，专门加入了 &lt;code>WIN_LOCK&lt;/code> 模式，由 &lt;code>Fn+WIN&lt;/code> 触发。
这对编程来说简直是噩梦，一旦用到了需要触发 &lt;code>WIN&lt;/code> 和 &lt;code>Fn&lt;/code> 的组合键，例如 &lt;code>WIN+箭头&lt;/code>，这时 &lt;code>WIN&lt;/code> 键位就给锁上了。&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>安装 &lt;code>dfu-util&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo pacman -S dfu-util
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>&lt;strong>下载 &lt;a href="http://en.obins.net/firmware#1J">V1.40.02 固件&lt;/a>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按住 &lt;code>Esc&lt;/code> 键不放，戳键盘背后的 Reset 按钮，释放 &lt;code>Esc&lt;/code> 键。
(注意，此处的 &lt;code>Esc&lt;/code> 是原先的 &lt;code>Esc&lt;/code> 键位，不是修改后的 &lt;code>Esc&lt;/code> 键。
键盘和电脑用 USB 线保持连接，不是断开。)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>写入固件&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">dfu-util --alt &lt;span style="color:#ae81ff">0&lt;/span> --intf &lt;span style="color:#ae81ff">0&lt;/span> --download xxx_NoWinLock.dfu
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>戳键盘背后的 Reset 按钮，退出 dfu 模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过蓝牙手机 APP 重设键位。
这时候 &lt;code>WIN_L&lt;/code> 依然会对应 WIN_LOCK，只是因为 APP 的原因，键盘已经生效。&lt;/p>
&lt;/li>
&lt;/ol>- //blog.yech.xyz/posts/keyboard_anne_pro/ - 2020 by Ye Chang</description></item><item><title>Linux 系统中的字体配置</title><link>//blog.yech.xyz/posts/edit_fontconfig_in_linux/</link><pubDate>Tue, 19 Feb 2019 16:59:41 +0800</pubDate><guid>//blog.yech.xyz/posts/edit_fontconfig_in_linux/</guid><description>Chang's blog //blog.yech.xyz/posts/edit_fontconfig_in_linux/ -&lt;p>Linux 系统中多采用 Fontconfig 对字体进行管理和配置。
其配置文件&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>为 XML 的格式，可以通过对字体进行映射来实现“重命名”的效果。&lt;/p>
&lt;blockquote>
&lt;p>为什么安装了 Noto 的中文字体，但是依然没法在网页中正常调用？&lt;/p>
&lt;/blockquote>
&lt;p>ArchLinux 中的 noto-fonts-cjk 字体包会安装&lt;code>Noto Serif CJK TC&lt;/code>、&lt;code>Noto Serif CJK KR&lt;/code>、&lt;code>Noto Serif CJK SC&lt;/code> 等字体文件，但是网页中的 Noto 中文字体调用多为&lt;code>Noto Serif SC&lt;/code>这样的命名，导致安装字体后不起作用。因此可以对&lt;code>Noto Serif SC&lt;/code>字体的调用进行映射：&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#75715e">&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!DOCTYPE fontconfig SYSTEM &amp;#34;fonts.dtd&amp;#34;&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;fontconfig&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;match&lt;/span> &lt;span style="color:#a6e22e">target=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;test&lt;/span> &lt;span style="color:#a6e22e">qual=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;any&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;family&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>Noto Serif SC&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/test&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;edit&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;family&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">mode=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;assign&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">binding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;same&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>Noto Serif CJK SC&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/edit&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/match&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;match&lt;/span> &lt;span style="color:#a6e22e">target=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;pattern&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;test&lt;/span> &lt;span style="color:#a6e22e">qual=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;any&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;family&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>Noto Serif TC&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/test&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;edit&lt;/span> &lt;span style="color:#a6e22e">name=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;family&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">mode=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;assign&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">binding=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;same&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;string&amp;gt;&lt;/span>Noto Serif CJK TC&lt;span style="color:#f92672">&amp;lt;/string&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/edit&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/match&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/fontconfig&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>fc-cache -fv&lt;/code> 重新生成字体配置的缓存。&lt;/li>
&lt;li>&lt;code>fc-list&lt;/code> 查看系统中的字体文件信息，但配置中的字体印射不在结果中显示。&lt;/li>
&lt;li>&lt;code>fc-match &amp;quot;Noto Serif SC&amp;quot;&lt;/code> 测试系统字体的调用。&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Fontconfig 2.10.1 版本后的用户配置位于 &lt;code>$XDG_CONFIG_HOME/fontconfig/fonts.conf&lt;/code> 和 &lt;code>$XDG_CONFIG_HOME/fontconfig/conf.d/xxx.conf&lt;/code>，一般也就是&lt;code>~/.config/fontconfig/fonts.conf&lt;/code>文件中，或是&lt;code>~/.config/fontconfig/conf.d/&lt;/code> 文件夹中的配置文件中。 &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section>
- //blog.yech.xyz/posts/edit_fontconfig_in_linux/ - 2020 by Ye Chang</description></item><item><title>『猪』事顺心</title><link>//blog.yech.xyz/posts/happy_new_year_of_pig/</link><pubDate>Fri, 15 Feb 2019 16:03:26 +0800</pubDate><guid>//blog.yech.xyz/posts/happy_new_year_of_pig/</guid><description>Chang's blog //blog.yech.xyz/posts/happy_new_year_of_pig/ -&lt;p>&lt;img src="//blog.yech.xyz/img/evolution-of-man-and-pig.png" alt="『猪』事顺心">&lt;/p>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> phD defense&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>2019&lt;/p>
&lt;/blockquote>
- //blog.yech.xyz/posts/happy_new_year_of_pig/ - 2020 by Ye Chang</description></item><item><title>Customize Deepin Desktop for Archlinux</title><link>//blog.yech.xyz/posts/customize_deepin_desktop_for_archlinux/</link><pubDate>Tue, 05 Feb 2019 18:28:41 +0800</pubDate><guid>//blog.yech.xyz/posts/customize_deepin_desktop_for_archlinux/</guid><description>Chang's blog //blog.yech.xyz/posts/customize_deepin_desktop_for_archlinux/ -&lt;blockquote>
&lt;p>在英文环境中打开日历的农历显示？&lt;sup>[1]&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>创建配置文件：&lt;code>~/.config/deepin/dde-calendar.conf&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在其中添加 &lt;code>EnableLunar=true&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>修改窗口的标题栏宽度？&lt;sup>[2]&lt;/sup>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>创建配置文件：&lt;/p>
&lt;p>&lt;code>~/.local/share/deepin/themes/deepin/light/titlebar.ini&lt;/code>(&lt;em>If you use light theme&lt;/em>)&lt;/p>
&lt;p>或 &lt;code>~/.local/share/deepin/themes/deepin/dark/titlebar.ini&lt;/code> (&lt;em>If you use dark theme&lt;/em>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在其中添加&lt;/p>
&lt;pre>&lt;code>```
[Active]
height=25
[Inactive]
height=25
```
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>注：仅对 deepin-kwin 生效，对 deepin-wm 无效。&lt;/p>
&lt;blockquote>
&lt;p>Reference&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>&lt;a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=154593&amp;amp;extra=&amp;amp;page=2">https://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=154593&amp;amp;extra=&amp;amp;page=2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/linuxdeepin/developer-center/issues/1210">https://github.com/linuxdeepin/developer-center/issues/1210&lt;/a>&lt;/li>
&lt;/ol>
- //blog.yech.xyz/posts/customize_deepin_desktop_for_archlinux/ - 2020 by Ye Chang</description></item><item><title>Use Black as Formatter for Jupyter Notebook</title><link>//blog.yech.xyz/posts/use_black_as_formatter_for_jupyter_notebook/</link><pubDate>Thu, 31 Jan 2019 20:34:01 +0800</pubDate><guid>//blog.yech.xyz/posts/use_black_as_formatter_for_jupyter_notebook/</guid><description>Chang's blog //blog.yech.xyz/posts/use_black_as_formatter_for_jupyter_notebook/ -&lt;blockquote>
&lt;p>How to setup?&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>Install Nbextensions in jupyter notebook.&lt;/p>
&lt;p>see &lt;a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions#1-install-the-python-package">https://github.com/ipython-contrib/jupyter_contrib_nbextensions#1-install-the-python-package&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Enable &lt;code>code prettify&lt;/code> Nbextensions in jupyter notebook.&lt;/p>
&lt;p>check the box in setting page&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Paste the configuration below into &lt;code>Prameters&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;python&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;library&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;import json\ndef black_reformat(cell_text):\n import black\n import re\n cell_text = re.sub(&amp;#39;^%&amp;#39;, &amp;#39;#%#&amp;#39;, cell_text, flags=re.M)\n try:\n reformated_text = black.format_str(cell_text, 88)\n except TypeError:\n reformated_text = black.format_str(cell_text, mode=black.FileMode(line_length=88))\n return re.sub(&amp;#39;^#%#&amp;#39;, &amp;#39;%&amp;#39;, reformated_text, flags=re.M)&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;print(json.dumps(black_reformat(u&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;postfix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;)))&amp;#34;&lt;/span>
},
&lt;span style="color:#f92672">&amp;#34;r&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;library&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;library(formatR)\nlibrary(jsonlite)&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cat(toJSON(paste(tidy_source(text=&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;postfix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;, output=FALSE)[[&amp;#39;text.tidy&amp;#39;]], collapse=&amp;#39;\n&amp;#39;)))&amp;#34;&lt;/span>
},
&lt;span style="color:#f92672">&amp;#34;javascript&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;library&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;jsbeautify = require(&amp;#39;js-beautify&amp;#39;)&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;prefix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;console.log(JSON.stringify(jsbeautify.js_beautify(&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;postfix&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;)));&amp;#34;&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Reference&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>&lt;a href="https://neuralcoder.science/Black-Jupyter/">https://neuralcoder.science/Black-Jupyter/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/csurfer/blackcellmagic/issues/5">https://github.com/csurfer/blackcellmagic/issues/5&lt;/a>&lt;/li>
&lt;/ol>
- //blog.yech.xyz/posts/use_black_as_formatter_for_jupyter_notebook/ - 2020 by Ye Chang</description></item><item><title>Set Default PDF Reader in Linux</title><link>//blog.yech.xyz/posts/set_default_pdf_reader_in_linux/</link><pubDate>Thu, 29 Mar 2018 21:41:30 +0800</pubDate><guid>//blog.yech.xyz/posts/set_default_pdf_reader_in_linux/</guid><description>Chang's blog //blog.yech.xyz/posts/set_default_pdf_reader_in_linux/ -&lt;blockquote>
&lt;p>solve the problem that gimp open pdf as default&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>check &lt;strong>filetype&lt;/strong> of a certain file&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">xdg-mime query filetype xxx.pdf
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>check &lt;strong>default mimetype&lt;/strong> of a certain filetype&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">xdg-mime query default application/pdf
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>set &lt;strong>default mimetype&lt;/strong> for a certain filetype&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">xdg-mime default evince.desktop application/pdf
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Reference:&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://superuser.com/questions/170035/pdfs-open-in-gimp-on-linux-system">https://superuser.com/questions/170035/pdfs-open-in-gimp-on-linux-system&lt;/a>&lt;/li>
&lt;/ul>
- //blog.yech.xyz/posts/set_default_pdf_reader_in_linux/ - 2020 by Ye Chang</description></item><item><title>Python and Cython Typing</title><link>//blog.yech.xyz/posts/python_and_cython_typing/</link><pubDate>Mon, 05 Mar 2018 19:12:53 +0800</pubDate><guid>//blog.yech.xyz/posts/python_and_cython_typing/</guid><description>Chang's blog //blog.yech.xyz/posts/python_and_cython_typing/ -&lt;ul>
&lt;li>PEP 526&lt;/li>
&lt;li>Cython 0.27&lt;/li>
&lt;/ul>
&lt;p>Python 是一门充满活力的语言，除了相关的包在快速的增加以外，Python 自身的语法特性也在不断推进。
然而这种变化被 Python2 和 Python3 的差异所掩盖，人们往往只关注 Python3 中引入与 Python2 不兼容的部分，而忽视了 Python3 本身也在不断改进。
Python 3.5/3.6 推出不少新的语法特性。虽然都不是强制性的，但如果不主动遵循，几年后别人看你的代码，就好像现在写 Python3 的人看 Pyhton2 代码一般。&lt;/p>
&lt;h2 id="类型声明">类型声明&lt;/h2>
&lt;p>Python 是动态语言，不需要像静态语言（C、java）那样声明变量类型。但这在写较大型的项目的时候反而会成为劣势，所以这几年 Python 试图引入统一的变量声明语法，这种改变好比 JavaScript 到 TypeScript 的变化。
&lt;a href="https://www.python.org/dev/peps/pep-0484/">PEP 484&lt;/a> 在注释中加入了 typing，而 Python 3.6 的 PEP 526 更为彻底，可以在代码中用类似 &lt;code>var: type&lt;/code> 的格式添加类型注释。&lt;/p>
&lt;p>&lt;a href="https://www.python.org/dev/peps/pep-0526/">PEP 526&lt;/a> 用到的注释方式和 Golang 类似，变量名在前，变量类型在后。
&lt;em>似乎新生的语言 Rust，TypeScript 偏好这种模式，而传统的语言 C，Java 采用相反的模式。&lt;/em>&lt;/p>
&lt;p>&lt;strong>之前的写法：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fun&lt;/span>(n):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Print the Fibonacci series up to n.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> b &lt;span style="color:#f92672">&amp;lt;&lt;/span> n:
a, b &lt;span style="color:#f92672">=&lt;/span> b, a &lt;span style="color:#f92672">+&lt;/span> b
&lt;span style="color:#66d9ef">return&lt;/span> b
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>新的写法：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fun&lt;/span>(n: int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> int:
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Print the Fibonacci series up to n.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
a: int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
b: int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> b &lt;span style="color:#f92672">&amp;lt;&lt;/span> n:
a, b &lt;span style="color:#f92672">=&lt;/span> b, a &lt;span style="color:#f92672">+&lt;/span> b
&lt;span style="color:#66d9ef">return&lt;/span> b
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="静态编译">静态编译&lt;/h2>
&lt;ul>
&lt;li>Cython 通过静态编译来提升 Python 代码的性能，而加入 C 的类型声明后提升效果更为明显。
只要稍微修改一些代码，就可以通过 Cython 获得大幅度的性能提升，在很多场景还是值得尝试的。&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Cython 不是唯一的方案, 还有 Swig 之类的，也可实现类似效果。&lt;/em>&lt;/p>
&lt;ul>
&lt;li>通过 &lt;code>pip install -U Cython&lt;/code>，安装最新版本 Cython。&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Cython 相关的知识就不赘述了，下面展示的都是关键函数的代码实现。&lt;/em>&lt;/p>
&lt;p>&lt;strong>Cython 传统实现方式：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">
cdef int fun(int n):
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Print the Fibonacci series up to n.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
cdef int a
cdef int b
a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> b &lt;span style="color:#f92672">&amp;lt;&lt;/span> n:
a, b &lt;span style="color:#f92672">=&lt;/span> b, a &lt;span style="color:#f92672">+&lt;/span> b
&lt;span style="color:#66d9ef">return&lt;/span> b
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(N: int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> int:
&lt;span style="color:#66d9ef">return&lt;/span> fun(N)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="新的尝试">新的尝试&lt;/h2>
&lt;p>但是既然 Python 新语法中有了类型声明（typing），那么是否可以就按着 Python 的方式加入 typing，这样代码更加 Pythonic。&lt;/p>
&lt;p>Github 上有过这样的&lt;a href="https://github.com/cython/cython/issues/1672">提问&lt;/a>，而最终也在 Cython 0.27 版加入了类似的尝试。&lt;/p>
&lt;p>Cython 0.27 Changlog 的第 3 点:&lt;/p>
&lt;blockquote>
&lt;p>Variable annotations are now parsed according to PEP 526. Cython types (e.g. &lt;code>cython.int&lt;/code>) are evaluated as C type declarations and everything else as Python types. This can be disabled with the directive &lt;code>annotation_typing=False&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">import&lt;/span> cython
&lt;span style="color:#a6e22e">@cython.cfunc&lt;/span> &lt;span style="color:#75715e"># cdef functions are faster but not callable from python&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fun&lt;/span>(n: cython&lt;span style="color:#f92672">.&lt;/span>int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> cython&lt;span style="color:#f92672">.&lt;/span>int:
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Print the Fibonacci series up to n.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
a: cython&lt;span style="color:#f92672">.&lt;/span>int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
b: cython&lt;span style="color:#f92672">.&lt;/span>int &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> b &lt;span style="color:#f92672">&amp;lt;&lt;/span> n:
a, b &lt;span style="color:#f92672">=&lt;/span> b, a &lt;span style="color:#f92672">+&lt;/span> b
&lt;span style="color:#66d9ef">return&lt;/span> b
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(N: cython&lt;span style="color:#f92672">.&lt;/span>int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> cython&lt;span style="color:#f92672">.&lt;/span>int:
&lt;span style="color:#66d9ef">return&lt;/span> fun(N)
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="性能比较">性能比较&lt;/h2>
&lt;ul>
&lt;li>1 raw python&lt;/li>
&lt;li>2 raw python with typing&lt;/li>
&lt;li>3 build cythonize python&lt;/li>
&lt;li>4 build cythonize python with typing&lt;/li>
&lt;li>5 build cythonize python with cdef&lt;/li>
&lt;li>6 build cythonize python with cython typing&lt;/li>
&lt;/ul>
- //blog.yech.xyz/posts/python_and_cython_typing/ - 2020 by Ye Chang</description></item><item><title>How to Publish a Hugo Project to Remote Server Automatically?</title><link>//blog.yech.xyz/posts/hugo_by_webhook/</link><pubDate>Sat, 03 Mar 2018 16:21:39 +0800</pubDate><guid>//blog.yech.xyz/posts/hugo_by_webhook/</guid><description>Chang's blog //blog.yech.xyz/posts/hugo_by_webhook/ -&lt;p>A pipeline for blogging automatically though Github&lt;/p>
&lt;h2 id="purpose">Purpose&lt;/h2>
&lt;p>write and serve markdown blog without caring about the html, theme, archiving, server, website, domain &amp;hellip;&lt;/p>
&lt;h2 id="what-to-build-workflow">What to Build? (Workflow)&lt;/h2>
&lt;pre>&lt;code>Local repo
↓
Github repo
↓
Webhook
↓
Server repo
↓
Caddy hook
↓
Hugo build
↓
Caddy serve
&lt;/code>&lt;/pre>
&lt;h2 id="step-by-step-examples">Step by Step Examples&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>generate a new hugo project&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e"># build a hugo site&lt;/span>
hugo new MyBlog
&lt;span style="color:#75715e"># theme&lt;/span>
&lt;span style="color:#75715e"># git submodule&lt;/span>
&lt;span style="color:#75715e"># write the markdown file&lt;/span>
&lt;span style="color:#75715e"># vim content/posts/xxx.md&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>server side&lt;/p>
&lt;p>install &lt;code>hugo, go, caddy&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>github side&lt;/p>
&lt;p>webhook&lt;/p>
&lt;/li>
&lt;/ol>- //blog.yech.xyz/posts/hugo_by_webhook/ - 2020 by Ye Chang</description></item><item><title>随手记录点vim技巧(三)</title><link>//blog.yech.xyz/posts/vim_tip_3/</link><pubDate>Thu, 01 Feb 2018 15:21:53 +0800</pubDate><guid>//blog.yech.xyz/posts/vim_tip_3/</guid><description>Chang's blog //blog.yech.xyz/posts/vim_tip_3/ -&lt;blockquote>
&lt;p>Q: vim 怎么快速插入 iso-8601 格式的时间戳？&lt;/p>
&lt;/blockquote>
&lt;p>修改&lt;code>~/.vimrc&lt;/code>，加入以下两行：&lt;/p>
&lt;pre>&lt;code>nmap &amp;lt;F8&amp;gt; i&amp;lt;C-R&amp;gt;=system('date --iso-8601=second')&amp;lt;CR&amp;gt;&amp;lt;Esc&amp;gt;
imap &amp;lt;F8&amp;gt; &amp;lt;C-R&amp;gt;=system('date --iso-8601=second')&amp;lt;CR&amp;gt;
&lt;/code>&lt;/pre>&lt;p>输出格式：&lt;/p>
&lt;p>&lt;code>2018-02-01T15:26:36+08:00&lt;/code>&lt;/p>
&lt;p>vim 内置命令&lt;code>strftime(&amp;quot;%FT%T%z&amp;quot;)&lt;/code>输出的结果是&lt;code>2018-02-01T15:26:36+0800&lt;/code>，和 iso-8601 类似，但时区少了分割，不完全兼容。
故调用系统&lt;code>date&lt;/code>命令。&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>Q：什么是 iso-8601 格式？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>yyyy-mm-ddThh:mm:ss±hh:mm&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>第一部分&lt;/strong>：完整年月日（完整意味着位数不够用 0 补齐，像&lt;code>2018-1-1&lt;/code>这样，是不符合格式的）&lt;/li>
&lt;li>&lt;code>T&lt;/code>分割日期和时间&lt;/li>
&lt;li>&lt;strong>第二部分&lt;/strong>：完整时分秒&lt;/li>
&lt;li>&lt;strong>第三部分&lt;/strong>：时区偏移量（当地时间和 UTC 的偏差，可以带正号或负号）&lt;/li>
&lt;li>日期时间都是当地的时间，比如偏差量&lt;code>+08:00&lt;/code>，反推 UTC 的时候应该是 &lt;code>UTC = localTime-8:00&lt;/code>，这里有点反直觉。&lt;/li>
&lt;/ul>- //blog.yech.xyz/posts/vim_tip_3/ - 2020 by Ye Chang</description></item><item><title>在R语言中使用并行</title><link>//blog.yech.xyz/posts/paralle_in_r/</link><pubDate>Wed, 31 Jan 2018 00:11:14 +0800</pubDate><guid>//blog.yech.xyz/posts/paralle_in_r/</guid><description>Chang's blog //blog.yech.xyz/posts/paralle_in_r/ -&lt;p>R 语言天生具有数据框处理的优势，这种优势掩盖了 R 中循环体的劣势，这间接导致了 R 并行难度大，各种包良莠不齐。&lt;/p>
&lt;p>这个文章整理了目前 R 语言并行运算常用的包，只讲入门 demo 和少许原理，不会深入。&lt;/p>- //blog.yech.xyz/posts/paralle_in_r/ - 2020 by Ye Chang</description></item></channel></rss>