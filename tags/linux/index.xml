<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Chang's blog</title><link>//blog.yech.xyz/tags/linux/</link><description>Recent content in linux on Chang's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2020 by Ye Chang</copyright><lastBuildDate>Mon, 23 Mar 2020 22:38:14 +0800</lastBuildDate><atom:link href="//blog.yech.xyz/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Fix a Bug in Quickrun, a Vim Plugin</title><link>//blog.yech.xyz/posts/fix_a_bug_in_quickrun_vim_plugin/</link><pubDate>Mon, 23 Mar 2020 22:38:14 +0800</pubDate><guid>//blog.yech.xyz/posts/fix_a_bug_in_quickrun_vim_plugin/</guid><description>Quickrun1是一个整合了常用编程语言运行命令的 Vim Plugin，可以通过 :Quickrun 命令，或是自定义的映射，一键运行当前文件。
今天在 Vim 中运行一个 R 文件时，发现结果一直输出“file name is missing”。查看错误日志，却发现一切正常; 用各种关键词搜索这个输出信息，均未能找到有用的信息; 查看插件的源码，也没看到这个报错的出处。
这时只能从文件入手，把文件（test.R）删到只剩下一句命令：
#!/usr/bin/env Rscript # -*- coding: utf-8 -*- print(&amp;#39;hello&amp;#39;) 运行了一下，依然是相同的报错。 再次陷入了 “越是容易上手的东西，越不容易使用” 的魔咒。
无奈之下只好把文件头的注释也删了。 这时，惊奇地发现居然成功地看到了正常的输出。 也就是说是文件头（shebang）2间接地触发了报错。 但是 Quickrun 是根据根据文件类型来触发运行命令的，理论上不应该受到文件注释的影响。 唯一的解释是 Quickrun 中加入了对 shebang 的识别机制。
再次翻看源码和文档，终于发现其中 R 语言的运行命令为：%c %o --no-save --slave %a &amp;lt; %s。 默认情况下 %c 会被替换为 comand 参数中的设定值，即 R。 但是在识别到 shebang 的时候，会将 %c（小写字母）替换为 %C（大些字母），而 %C 对应的是 shebang 中设定值，即 Rscript。 正常情况下，当前文件 %s 会被逐行输出（&amp;lt;）为 R 命令的标准输入，R 命令支持命令行模式。 但是 Rscript 命令只支持文件名作为输入参数，因此触发了报错。诡异的报错信息就是简单粗暴的 &amp;lsquo;file name is missing&amp;rsquo;（R 相关的设计一直都很随意，大多数的文档和报错信息都云里雾里的。）。 可以测试这个例子：</description></item><item><title>Fcitx5 as Chinese Input Method</title><link>//blog.yech.xyz/posts/fcitx5_as_chinese_input_method/</link><pubDate>Thu, 06 Feb 2020 17:13:56 +0800</pubDate><guid>//blog.yech.xyz/posts/fcitx5_as_chinese_input_method/</guid><description>安装 Archlinux 最后一件事往往是安装搜狗输入法，这也是最困难的一件事。
从 AUR 编译源码需要花费大量的时间（低配置的 Laptop 上需要半天）。 为了兼容 QT4, QT5, GTK4, GTK5, XIM 等框架的应用，需要各种调试。 搜狗输入法带有 bug，经常无法调出输入法，或是输入皮肤不显示。 这直到 fcitx5 发布，一切终于有了转机会。 若非进行大量的中文写作，fcitx5 中的拼音插件1完全可以胜任日常的中文输入。
fcitx5 安装及配置步骤也非常简单，而且稳定性出奇的好。大致步骤如下：
安装 fcitx5：
从 AUR 安装2：
yay -S fcitx5-git fcitx5-qt5-git fcitx5-gtk-git fcitx5-chinese-addons-git 若配置了 ArchlinuxCN3，从 ArchlinuxCN 安装：
pacman -S fcitx5-git fcitx5-qt5-git fcitx5-gtk-git fcitx5-chinese-addons-git 设置 fcitx5 的开启：
基于 Xorg 的桌面环境，添加配置到 ~/.xprofile：
export GTK_IM_MODULE=fcitx5 export XMODIFIERS=&amp;quot;@im=fcitx&amp;quot; export QT_IM_MODULE=fcitx5 fcitx5 &amp;gt; /dev/null &amp;amp; 基于 Wayland 的桌面环境，添加配置到 ~/.</description></item><item><title>Shell Shortcut</title><link>//blog.yech.xyz/posts/shell_shortcut/</link><pubDate>Tue, 05 Mar 2019 19:21:46 +0800</pubDate><guid>//blog.yech.xyz/posts/shell_shortcut/</guid><description>Some useful bash shortcut for me.
key method Ctrl + a Move to the beginning of the line Ctrl + e Move to the end of the line Ctrl + u (bash) Clear the characters on the line before the current cursor position Ctrl + u (zsh) If you&amp;rsquo;re using the zsh, this will clear the entire line Ctrl + k Clear the characters on the line after the current cursor position Ctrl + w Delete the word in front of the cursor Ctrl + r Search history Ctrl + g Escape from search mode Ctrl + - Undo the last change Ctrl + s Stop output to screen Ctrl + q Re-enable screen output Ctrl + c Terminate/kill current foreground process Ctrl + z Suspend/stop current foreground process Alt + d Delete the word after the cursor Ctrl + l Clear screen Ctrl + j Sent Enter Ctrl + j Delete one charater before cursor</description></item><item><title>Configure iSCSI on Ubuntu</title><link>//blog.yech.xyz/posts/configure_iscsi_on_ubuntu/</link><pubDate>Tue, 26 Feb 2019 19:05:50 +0800</pubDate><guid>//blog.yech.xyz/posts/configure_iscsi_on_ubuntu/</guid><description>iSCSI (Internet Small Computer System Interface) is a protocol that allows SCSI commands to be transmitted over a network.
The SCSI communicates with devices such as hard disks through the SCSI controller, and the SCSI controller is called the Target. While the client application that initiates the access is called the Initiator.
Assumed that you already have an iSCSI target on your local network
Install open-iscsi package in Ubuntu server, and configure it into an iSCSI initiator.</description></item><item><title>Linux 系统中的字体配置</title><link>//blog.yech.xyz/posts/edit_fontconfig_in_linux/</link><pubDate>Tue, 19 Feb 2019 16:59:41 +0800</pubDate><guid>//blog.yech.xyz/posts/edit_fontconfig_in_linux/</guid><description>Linux 系统中多采用 Fontconfig 对字体进行管理和配置。 其配置文件1为 XML 的格式，可以通过对字体进行映射来实现“重命名”的效果。
为什么安装了 Noto 的中文字体，但是依然没法在网页中正常调用？
ArchLinux 中的 noto-fonts-cjk 字体包会安装Noto Serif CJK TC、Noto Serif CJK KR、Noto Serif CJK SC 等字体文件，但是网页中的 Noto 中文字体调用多为Noto Serif SC这样的命名，导致安装字体后不起作用。因此可以对Noto Serif SC字体的调用进行映射：
&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE fontconfig SYSTEM &amp;#34;fonts.dtd&amp;#34;&amp;gt; &amp;lt;fontconfig&amp;gt; &amp;lt;match target=&amp;#34;pattern&amp;#34;&amp;gt; &amp;lt;test qual=&amp;#34;any&amp;#34; name=&amp;#34;family&amp;#34;&amp;gt; &amp;lt;string&amp;gt;Noto Serif SC&amp;lt;/string&amp;gt; &amp;lt;/test&amp;gt; &amp;lt;edit name=&amp;#34;family&amp;#34; mode=&amp;#34;assign&amp;#34; binding=&amp;#34;same&amp;#34;&amp;gt; &amp;lt;string&amp;gt;Noto Serif CJK SC&amp;lt;/string&amp;gt; &amp;lt;/edit&amp;gt; &amp;lt;/match&amp;gt; &amp;lt;match target=&amp;#34;pattern&amp;#34;&amp;gt; &amp;lt;test qual=&amp;#34;any&amp;#34; name=&amp;#34;family&amp;#34;&amp;gt; &amp;lt;string&amp;gt;Noto Serif TC&amp;lt;/string&amp;gt; &amp;lt;/test&amp;gt; &amp;lt;edit name=&amp;#34;family&amp;#34; mode=&amp;#34;assign&amp;#34; binding=&amp;#34;same&amp;#34;&amp;gt; &amp;lt;string&amp;gt;Noto Serif CJK TC&amp;lt;/string&amp;gt; &amp;lt;/edit&amp;gt; &amp;lt;/match&amp;gt; &amp;lt;/fontconfig&amp;gt; fc-cache -fv 重新生成字体配置的缓存。 fc-list 查看系统中的字体文件信息，但配置中的字体印射不在结果中显示。 fc-match &amp;quot;Noto Serif SC&amp;quot; 测试系统字体的调用。 Fontconfig 2.</description></item><item><title>Customize Deepin Desktop for Archlinux</title><link>//blog.yech.xyz/posts/customize_deepin_desktop_for_archlinux/</link><pubDate>Tue, 05 Feb 2019 18:28:41 +0800</pubDate><guid>//blog.yech.xyz/posts/customize_deepin_desktop_for_archlinux/</guid><description> 在英文环境中打开日历的农历显示？[1]
创建配置文件：~/.config/deepin/dde-calendar.conf
在其中添加 EnableLunar=true
修改窗口的标题栏宽度？[2]
创建配置文件：
~/.local/share/deepin/themes/deepin/light/titlebar.ini(If you use light theme)
或 ~/.local/share/deepin/themes/deepin/dark/titlebar.ini (If you use dark theme)
在其中添加
``` [Active] height=25 [Inactive] height=25 ``` 注：仅对 deepin-kwin 生效，对 deepin-wm 无效。
Reference
https://bbs.deepin.org/forum.php?mod=viewthread&amp;amp;tid=154593&amp;amp;extra=&amp;amp;page=2 https://github.com/linuxdeepin/developer-center/issues/1210</description></item><item><title>Set Default PDF Reader in Linux</title><link>//blog.yech.xyz/posts/set_default_pdf_reader_in_linux/</link><pubDate>Thu, 29 Mar 2018 21:41:30 +0800</pubDate><guid>//blog.yech.xyz/posts/set_default_pdf_reader_in_linux/</guid><description> solve the problem that gimp open pdf as default
check filetype of a certain file
xdg-mime query filetype xxx.pdf check default mimetype of a certain filetype
xdg-mime query default application/pdf set default mimetype for a certain filetype
xdg-mime default evince.desktop application/pdf Reference:
https://superuser.com/questions/170035/pdfs-open-in-gimp-on-linux-system</description></item><item><title>How to use bioawk</title><link>//blog.yech.xyz/posts/how_to_use_bioawk/</link><pubDate>Mon, 29 Jan 2018 10:58:08 +0800</pubDate><guid>//blog.yech.xyz/posts/how_to_use_bioawk/</guid><description>在 Linux 命令行处理文件过程中,合并文件是一个最基本的操作。
例如有 file1，file2，file3 几个文件，想合并成一个大文件 fileall，这个几乎有个标准答案：
cat file1 file2 file3 &amp;gt; fileall 简单再说两点,
cat是 concatenate 的缩写，本身就是串联的意思。用cat来 print out 文件反而不是这个单词本身的含义。
如果是 bash 下，且文件名称是连续的，cat file{1..3} &amp;gt; fileall应该是逼格更高的写法。
而实际需求很少是上面这么直接，更常见的需求是要文件名也放到最终文件中，以区别不同的样品类型，数据来源之类的。这时候就需要拿出awk，代码实现也非常直接：
# 将文件名作为输出数据的第一列 awk &amp;#39;{FILENAME,$0}&amp;#39; file{1..3} &amp;gt; fileall awk 基本可以实现大部分的文件操作。 网上会把 sed 和 awk 放在一起封神，而 sed 之于 awk，有如 emacs 至于 vim。 一个是神的工具，一个是工具之神。 linux 下有不是这样有趣的组合，前者功能强大，但学习成本略高，后者功能少了一点，但思路清晰，上手快。
在引出文章的主角bioawk之前，还要把需求再弄复杂一点。
如果文件是都 gzip 压缩的话，是否也能解决呢？
这个其实不少见，比如多个.bed.gz 文件合并，多个.fq.gz 文件合并&amp;hellip;
把文件都解压后再操作是一个方法，不过这时候除了浪费空间外，还多了两次IO。
linux 下zcat命令可以进行 gzip 格式文件的读取，因而有类似的操作：</description></item><item><title>Linux for Beginer from a Beginer</title><link>//blog.yech.xyz/posts/linux_for_beginer_from_a_beginer/</link><pubDate>Tue, 22 Dec 2015 13:47:48 +0800</pubDate><guid>//blog.yech.xyz/posts/linux_for_beginer_from_a_beginer/</guid><description>这不是一份系统的教程, 也不是科学的入门方案, 只是希望能让刚接触 linux 的人少点困惑.
linux 是一个操作系统, 和 windows 一样。所以 windows 下能实现的, linux 基本也能实现。反过来也是一样的。1
不过,别问我 linux 怎么上 QQ, 基本没有很好的方案.
文件操作 windows 下做得最多的文件操作无非是&amp;quot;打开&amp;rdquo;,&amp;ldquo;复制&amp;rdquo;,&amp;ldquo;粘贴&amp;rdquo;,&amp;ldquo;重命名&amp;rdquo;. linux 下的对应关系
&amp;quot;打开文件夹&amp;quot; == &amp;quot;ls&amp;quot; 例子一: 打开当前文件夹 &amp;quot;复制+粘贴&amp;quot; == &amp;quot;cp&amp;quot; 例子二: 复制 hehe.txt 文件,并粘贴为 haha.txt &amp;quot;重命名/移动&amp;quot; == &amp;quot;mv&amp;quot; 例子三: 将 haha.txt 重命名为 hello.txt 虽然这些命令都是两个字符能搞定的, 但是后面得输入很长的一串文件名, 熟练使用 windows 的人一定会觉得效率太低. 不过这里面涉及到 linux 的哲学: &amp;ldquo;一切都是对象&amp;rdquo;, 可以勉强的理解为所有的东西都是可以操作的, 这是 linux 和 windows 比较大的区别. 因为这里说的 &amp;ldquo;一切&amp;rdquo; 包括了复制粘贴命名本身.</description></item></channel></rss>