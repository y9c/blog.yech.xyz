<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Chang's blog</title><link>//blog.yech.xyz/tags/python/</link><description>Recent content in python on Chang's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2020 by Ye Chang</copyright><lastBuildDate>Thu, 31 Jan 2019 20:34:01 +0800</lastBuildDate><atom:link href="//blog.yech.xyz/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Black as Formatter for Jupyter Notebook</title><link>//blog.yech.xyz/posts/use_black_as_formatter_for_jupyter_notebook/</link><pubDate>Thu, 31 Jan 2019 20:34:01 +0800</pubDate><guid>//blog.yech.xyz/posts/use_black_as_formatter_for_jupyter_notebook/</guid><description>How to setup?
Install Nbextensions in jupyter notebook.
see https://github.com/ipython-contrib/jupyter_contrib_nbextensions#1-install-the-python-package
Enable code prettify Nbextensions in jupyter notebook.
check the box in setting page
Paste the configuration below into Prameters.
{ &amp;#34;python&amp;#34;: { &amp;#34;library&amp;#34;: &amp;#34;import json\ndef black_reformat(cell_text):\n import black\n import re\n cell_text = re.sub(&amp;#39;^%&amp;#39;, &amp;#39;#%#&amp;#39;, cell_text, flags=re.M)\n try:\n reformated_text = black.format_str(cell_text, 88)\n except TypeError:\n reformated_text = black.format_str(cell_text, mode=black.FileMode(line_length=88))\n return re.sub(&amp;#39;^#%#&amp;#39;, &amp;#39;%&amp;#39;, reformated_text, flags=re.M)&amp;#34;, &amp;#34;prefix&amp;#34;: &amp;#34;print(json.</description></item><item><title>Python and Cython Typing</title><link>//blog.yech.xyz/posts/python_and_cython_typing/</link><pubDate>Mon, 05 Mar 2018 19:12:53 +0800</pubDate><guid>//blog.yech.xyz/posts/python_and_cython_typing/</guid><description>PEP 526 Cython 0.27 Python 是一门充满活力的语言，除了相关的包在快速的增加以外，Python 自身的语法特性也在不断推进。 然而这种变化被 Python2 和 Python3 的差异所掩盖，人们往往只关注 Python3 中引入与 Python2 不兼容的部分，而忽视了 Python3 本身也在不断改进。 Python 3.5/3.6 推出不少新的语法特性。虽然都不是强制性的，但如果不主动遵循，几年后别人看你的代码，就好像现在写 Python3 的人看 Pyhton2 代码一般。
类型声明 Python 是动态语言，不需要像静态语言（C、java）那样声明变量类型。但这在写较大型的项目的时候反而会成为劣势，所以这几年 Python 试图引入统一的变量声明语法，这种改变好比 JavaScript 到 TypeScript 的变化。 PEP 484 在注释中加入了 typing，而 Python 3.6 的 PEP 526 更为彻底，可以在代码中用类似 var: type 的格式添加类型注释。
PEP 526 用到的注释方式和 Golang 类似，变量名在前，变量类型在后。 似乎新生的语言 Rust，TypeScript 偏好这种模式，而传统的语言 C，Java 采用相反的模式。
之前的写法：
def fun(n): &amp;#34;&amp;#34;&amp;#34;Print the Fibonacci series up to n.&amp;#34;&amp;#34;&amp;#34; a = 0 b = 1 while b &amp;lt; n: a, b = b, a + b return b 新的写法：</description></item></channel></rss>